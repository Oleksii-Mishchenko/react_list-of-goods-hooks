{"version":3,"sources":["types/SortType.ts","App.tsx","functions/getReorderedGoods.ts","index.tsx"],"names":["SortType","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goodsList","goods","visibleGoods","sort","prev","next","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","goodsFromServer","className","type","onClick","classNames","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,6EAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,2BCQCC,EAAgB,WAC3B,MAAgCC,mBAASF,EAASG,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,ECVD,SACLC,EACAL,EACAE,GAEA,IAAMI,EAAY,YAAOD,GAqBzB,OAnBIL,GACFM,EAAaC,MAAK,SAACC,EAAMC,GACvB,OAAQT,GACN,KAAKJ,EAASc,SACZ,OAAOF,EAAKG,cAAcF,GAE5B,KAAKb,EAASgB,OACZ,OAAOJ,EAAKK,OAASJ,EAAKI,OAE5B,QACE,OAAO,MAKXX,GACFI,EAAaQ,UAGRR,EDhBWS,CAChBC,EACAhB,EACAE,GAWF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAbmB,kBAAMlB,EAAYL,EAASc,WAc9CO,UAAWG,IACT,SACA,UACA,CAAE,WAAYpB,IAAaJ,EAASc,WANxC,iCAYA,wBACEQ,KAAK,SACLC,QAxBiB,kBAAMlB,EAAYL,EAASgB,SAyB5CK,UAAWG,IACT,SACA,aACA,CAAE,WAAYpB,IAAaJ,EAASgB,SANxC,4BAYA,wBACEM,KAAK,SACLC,QAnCgB,kBAAMhB,GAAc,SAAAkB,GAAO,OAAKA,MAoChDJ,UAAWG,IACT,SACA,aACA,CAAE,YAAalB,IANnB,sBAYEF,GAAYE,IACZ,wBACEgB,KAAK,SACLC,QA/Cc,WACtBlB,EAAYL,EAASG,MACrBI,GAAc,IA8CNc,UAAU,mBAHZ,sBAUJ,6BACE,6BACGb,EAAUkB,KAAI,SAAAC,GAAI,OACjB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cE5EpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.2cbebbcc.chunk.js","sourcesContent":["export enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport goodsFromServer from './data/goodsFromServer.json';\nimport { SortType } from './types/SortType';\nimport { getReorderedGoods } from './functions/getReorderedGoods';\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const goodsList = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  const handleAlphabetSort = () => setSortType(SortType.ALPHABET);\n  const handleLengthSort = () => setSortType(SortType.LENGTH);\n  const handleReversion = () => setIsReversed(current => !current);\n  const handleResetting = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleAlphabetSort}\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleLengthSort}\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReversion}\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            onClick={handleResetting}\n            className=\"button is-danger\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goodsList.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import { SortType } from '../types/SortType';\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n): string[] {\n  const visibleGoods = [...goods];\n\n  if (sortType) {\n    visibleGoods.sort((prev, next) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return prev.localeCompare(next);\n\n        case SortType.LENGTH:\n          return prev.length - next.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}